#!/usr/bin/env python3
"""
Network Monitor Notification System
Supports SMS and Email alerts for network issues
"""

import smtplib
import requests
import json
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import os

# User Configuration
EMAIL = "kingfatehkhan786@gmail.com"
PHONE = "+910000000000"

class NotificationManager:
    def __init__(self):
        self.email = EMAIL
        self.phone = PHONE
        self.smtp_config = {
            'server': 'smtp.gmail.com',
            'port': 587,
            'username': 'networkmonitor2025@gmail.com',  # We'll need to create this
            'password': 'app_password_here'  # App password
        }
        
    def send_email(self, subject, message, severity="INFO"):
        """Send email notification using free SMTP (Gmail)"""
        try:
            # Create message
            msg = MIMEMultipart()
            msg['From'] = self.smtp_config['username']
            msg['To'] = self.email
            msg['Subject'] = f"ðŸš¨ Network Alert - {subject}"
            
            # HTML email body
            html_body = f"""
            <html>
                <head></head>
                <body style="font-family: Arial, sans-serif; background: #f4f4f4; padding: 20px;">
                    <div style="max-width: 600px; margin: 0 auto; background: white; border-radius: 10px; padding: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                        <div style="text-align: center; margin-bottom: 20px;">
                            <h1 style="color: {'#e74c3c' if severity == 'CRITICAL' else '#f39c12' if severity == 'WARNING' else '#3498db'};">
                                {'ðŸ”´' if severity == 'CRITICAL' else 'ðŸŸ¡' if severity == 'WARNING' else 'ðŸ”µ'} Network Monitor Alert
                            </h1>
                        </div>
                        <div style="background: #ecf0f1; padding: 15px; border-radius: 5px; margin: 15px 0;">
                            <h3 style="margin: 0; color: #2c3e50;">Alert Details:</h3>
                            <p style="margin: 10px 0; font-size: 16px;"><strong>Subject:</strong> {subject}</p>
                            <p style="margin: 10px 0; font-size: 16px;"><strong>Message:</strong> {message}</p>
                            <p style="margin: 10px 0; font-size: 14px; color: #7f8c8d;"><strong>Time:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                            <p style="margin: 10px 0; font-size: 14px; color: #7f8c8d;"><strong>Severity:</strong> {severity}</p>
                        </div>
                        <div style="text-align: center; margin-top: 20px;">
                            <p style="color: #7f8c8d; font-size: 12px;">
                                This alert was generated by your Network Monitoring System<br>
                                Developed by Fateh Khan Â© 2025
                            </p>
                        </div>
                    </div>
                </body>
            </html>
            """
            
            msg.attach(MIMEText(html_body, 'html'))
            
            # Send email
            server = smtplib.SMTP(self.smtp_config['server'], self.smtp_config['port'])
            server.starttls()
            server.login(self.smtp_config['username'], self.smtp_config['password'])
            server.send_message(msg)
            server.quit()
            
            return True, "Email sent successfully"
            
        except Exception as e:
            return False, f"Email failed: {str(e)}"
    
    def send_sms_textbelt(self, message):
        """Send SMS using TextBelt (Free SMS API - 1 free per day)"""
        try:
            response = requests.post('https://textbelt.com/text', {
                'phone': self.phone,
                'message': f"ðŸš¨ Network Alert: {message}",
                'key': 'textbelt'  # Free tier - 1 SMS per day
            })
            
            result = response.json()
            if result.get('success'):
                return True, "SMS sent successfully"
            else:
                return False, f"SMS failed: {result.get('error', 'Unknown error')}"
                
        except Exception as e:
            return False, f"SMS failed: {str(e)}"
    
    def send_sms_twilio_free(self, message):
        """Send SMS using Twilio Trial (Free tier available)"""
        # Twilio credentials would go here
        # For now, we'll use TextBelt as primary SMS provider
        return self.send_sms_textbelt(message)
    
    def send_notification(self, title, message, severity="INFO", include_sms=True, include_email=True):
        """Send notification via multiple channels"""
        results = []
        
        if include_email:
            email_success, email_msg = self.send_email(title, message, severity)
            results.append(f"Email: {email_msg}")
            
        if include_sms and severity in ['CRITICAL', 'WARNING']:
            sms_success, sms_msg = self.send_sms_textbelt(f"{title}: {message}")
            results.append(f"SMS: {sms_msg}")
        
        return results
    
    def test_notifications(self):
        """Test all notification methods"""
        print("ðŸ§ª Testing notification systems...")
        
        # Test email
        email_result = self.send_email(
            "Test Alert", 
            "This is a test notification from your Network Monitor system.", 
            "INFO"
        )
        print(f"ðŸ“§ Email Test: {email_result[1]}")
        
        # Test SMS
        sms_result = self.send_sms_textbelt(
            "This is a test SMS from your Network Monitor system."
        )
        print(f"ðŸ“± SMS Test: {sms_result[1]}")
        
        return email_result[0] and sms_result[0]

# Network monitoring alert conditions
def check_network_alerts(ping_stats, timeout_count=0):
    """Check if network conditions warrant an alert"""
    notifications = NotificationManager()
    alerts = []
    
    # Critical: High packet loss
    for host, stats in ping_stats.items():
        loss_rate = stats.get('packet_loss', 0)
        if loss_rate > 50:
            alerts.append(notifications.send_notification(
                f"Critical Packet Loss - {host}",
                f"Packet loss is {loss_rate}% for {host}. Network connectivity severely impacted.",
                "CRITICAL"
            ))
    
    # Warning: Moderate packet loss
    for host, stats in ping_stats.items():
        loss_rate = stats.get('packet_loss', 0)
        latency = stats.get('avg_latency', 0)
        if 10 < loss_rate <= 50:
            alerts.append(notifications.send_notification(
                f"Network Issues - {host}",
                f"Packet loss is {loss_rate}% and latency is {latency}ms for {host}.",
                "WARNING"
            ))
    
    # Critical: Multiple timeouts
    if timeout_count > 10:
        alerts.append(notifications.send_notification(
            "Multiple Network Timeouts",
            f"Detected {timeout_count} consecutive timeouts. Network may be down.",
            "CRITICAL"
        ))
    
    return alerts

if __name__ == "__main__":
    # Test the notification system
    notifier = NotificationManager()
    notifier.test_notifications()
